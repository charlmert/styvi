#!/usr/bin/python3
import os
import smashi.cmd
import subprocess
import shlex

home_path = os.path.dirname(os.path.realpath(__file__))

command = "ps aux | awk '{print $2}' | sed '1d' | xargs -I{} %s/lsac_lsof {}" % home_path


#command = "ps aux | awk '{print $2}'"

#p1 = subprocess.Popen(["ps", "aux"], stdout=subprocess.PIPE)

#p2 = subprocess.Popen(["awk", "{print $2}"], stdin=p1.stdout, stdout=subprocess.PIPE)
#p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.

#p3 = subprocess.Popen(["xargs", "-I{}", "%s/lsac_lsof" % home_path, "{}"], stdin=p2.stdout, stdout=subprocess.PIPE)
#p2.stdout.close()  # Allow p2 to receive a SIGPIPE if p3 exits.

#output,err = p3.communicate()

#output = smashi.cmd.output(command)

#print(output)

output = subprocess.check_output(command, shell=True)

counter = 0
for line in output.decode('utf-8').split('\n'):
    print(line)
    counter = counter + 1

"""
# Debug smashi.cmd
def output(command, answers=None, argShell=False):
    command = command.replace('||', 'BASH_OR')
    pipedCommands = command.split('|')
    command = command.replace('BASH_OR', '||')
    counter = 0
    p = []
    for pipeCommand in pipedCommands:
        pipeCommand = pipeCommand.replace('BASH_OR', '||')
        if len(pipedCommands) > 1 and counter > 1:
            print('appending command %i %s' % (counter, shlex.split(pipeCommand)))
            p.append(subprocess.Popen(shlex.split(pipeCommand), stdin=p[counter - 1].stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=argShell))
            p[counter - 1].stdout.close()
        else:
            print('appending command %i %s' % (counter, shlex.split(pipeCommand)))
            p.append(subprocess.Popen(shlex.split(pipeCommand), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=argShell))
            p[counter].stdout.close()

        counter = counter + 1

    print(counter - 1)
    output, err = p[counter - 1].communicate()
    return output, err
    #ret = p.wait()
    #return (ret, p.stdout.read().decode('UTF-8'), p.stderr.read().decode('UTF-8'))

"""
